// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rdd.proto

/*
Package rddpb is a generated protocol buffer package.

It is generated from these files:
	rdd.proto

It has these top-level messages:
	RDDProvisionRequest
	RDDProvisionResponse
	RDDStatusRequest
	RDDStatusResponse
	RDDDeprovisionRequest
	RDDDeprovisionResponse
	ActionRequest
	ActionResponse
	Resource
*/
package rddpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DaemonState int32

const (
	// requested means the provisioning of the specified remote docker daemon has been requested but has not started
	DaemonState_requested DaemonState = 0
	// provisioning means the provisioning of the specified remote docker daemon is in progress
	DaemonState_provisioning DaemonState = 1
	// provisioned means the specified remote docker daemon has been provisioned
	DaemonState_provisioned DaemonState = 2
	// deprovisioning means the specified remote docker daemon is being deprovisioned
	DaemonState_deprovisioning DaemonState = 3
	// error means that the specified remote docker daemon could not be provisioned
	DaemonState_error DaemonState = 4
	// deprovisioned means the specified remote docker daemon is deprovisioned
	DaemonState_deprovisioned DaemonState = 5
)

var DaemonState_name = map[int32]string{
	0: "requested",
	1: "provisioning",
	2: "provisioned",
	3: "deprovisioning",
	4: "error",
	5: "deprovisioned",
}
var DaemonState_value = map[string]int32{
	"requested":      0,
	"provisioning":   1,
	"provisioned":    2,
	"deprovisioning": 3,
	"error":          4,
	"deprovisioned":  5,
}

func (x DaemonState) String() string {
	return proto.EnumName(DaemonState_name, int32(x))
}
func (DaemonState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RDDProvisionRequest struct {
	RunID string `protobuf:"bytes,1,opt,name=runID" json:"runID,omitempty"`
}

func (m *RDDProvisionRequest) Reset()                    { *m = RDDProvisionRequest{} }
func (m *RDDProvisionRequest) String() string            { return proto.CompactTextString(m) }
func (*RDDProvisionRequest) ProtoMessage()               {}
func (*RDDProvisionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RDDProvisionRequest) GetRunID() string {
	if m != nil {
		return m.RunID
	}
	return ""
}

type RDDProvisionResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RDDProvisionResponse) Reset()                    { *m = RDDProvisionResponse{} }
func (m *RDDProvisionResponse) String() string            { return proto.CompactTextString(m) }
func (*RDDProvisionResponse) ProtoMessage()               {}
func (*RDDProvisionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RDDProvisionResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RDDStatusRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RDDStatusRequest) Reset()                    { *m = RDDStatusRequest{} }
func (m *RDDStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*RDDStatusRequest) ProtoMessage()               {}
func (*RDDStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RDDStatusRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RDDStatusResponse struct {
	State        DaemonState                 `protobuf:"varint,1,opt,name=state,enum=rdd.DaemonState" json:"state,omitempty"`
	RunID        string                      `protobuf:"bytes,2,opt,name=runID" json:"runID,omitempty"`
	CreationDate *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=creationDate" json:"creationDate,omitempty"`
	UpdateDate   *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=updateDate" json:"updateDate,omitempty"`
	URL          string                      `protobuf:"bytes,5,opt,name=URL" json:"URL,omitempty"`
}

func (m *RDDStatusResponse) Reset()                    { *m = RDDStatusResponse{} }
func (m *RDDStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*RDDStatusResponse) ProtoMessage()               {}
func (*RDDStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RDDStatusResponse) GetState() DaemonState {
	if m != nil {
		return m.State
	}
	return DaemonState_requested
}

func (m *RDDStatusResponse) GetRunID() string {
	if m != nil {
		return m.RunID
	}
	return ""
}

func (m *RDDStatusResponse) GetCreationDate() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreationDate
	}
	return nil
}

func (m *RDDStatusResponse) GetUpdateDate() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UpdateDate
	}
	return nil
}

func (m *RDDStatusResponse) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

type RDDDeprovisionRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RDDDeprovisionRequest) Reset()                    { *m = RDDDeprovisionRequest{} }
func (m *RDDDeprovisionRequest) String() string            { return proto.CompactTextString(m) }
func (*RDDDeprovisionRequest) ProtoMessage()               {}
func (*RDDDeprovisionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RDDDeprovisionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RDDDeprovisionResponse struct {
}

func (m *RDDDeprovisionResponse) Reset()                    { *m = RDDDeprovisionResponse{} }
func (m *RDDDeprovisionResponse) String() string            { return proto.CompactTextString(m) }
func (*RDDDeprovisionResponse) ProtoMessage()               {}
func (*RDDDeprovisionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ActionRequest struct {
}

func (m *ActionRequest) Reset()                    { *m = ActionRequest{} }
func (m *ActionRequest) String() string            { return proto.CompactTextString(m) }
func (*ActionRequest) ProtoMessage()               {}
func (*ActionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ActionResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *ActionResponse) Reset()                    { *m = ActionResponse{} }
func (m *ActionResponse) String() string            { return proto.CompactTextString(m) }
func (*ActionResponse) ProtoMessage()               {}
func (*ActionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ActionResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type Resource struct {
	Kind string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
}

func (m *Resource) Reset()                    { *m = Resource{} }
func (m *Resource) String() string            { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()               {}
func (*Resource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Resource) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func init() {
	proto.RegisterType((*RDDProvisionRequest)(nil), "rdd.RDDProvisionRequest")
	proto.RegisterType((*RDDProvisionResponse)(nil), "rdd.RDDProvisionResponse")
	proto.RegisterType((*RDDStatusRequest)(nil), "rdd.RDDStatusRequest")
	proto.RegisterType((*RDDStatusResponse)(nil), "rdd.RDDStatusResponse")
	proto.RegisterType((*RDDDeprovisionRequest)(nil), "rdd.RDDDeprovisionRequest")
	proto.RegisterType((*RDDDeprovisionResponse)(nil), "rdd.RDDDeprovisionResponse")
	proto.RegisterType((*ActionRequest)(nil), "rdd.ActionRequest")
	proto.RegisterType((*ActionResponse)(nil), "rdd.ActionResponse")
	proto.RegisterType((*Resource)(nil), "rdd.Resource")
	proto.RegisterEnum("rdd.DaemonState", DaemonState_name, DaemonState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Rdd service

type RddClient interface {
	Provision(ctx context.Context, in *RDDProvisionRequest, opts ...grpc.CallOption) (*RDDProvisionResponse, error)
	GetStatus(ctx context.Context, in *RDDStatusRequest, opts ...grpc.CallOption) (*RDDStatusResponse, error)
	Deprovision(ctx context.Context, in *RDDDeprovisionRequest, opts ...grpc.CallOption) (*RDDDeprovisionResponse, error)
	Action(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ActionResponse, error)
}

type rddClient struct {
	cc *grpc.ClientConn
}

func NewRddClient(cc *grpc.ClientConn) RddClient {
	return &rddClient{cc}
}

func (c *rddClient) Provision(ctx context.Context, in *RDDProvisionRequest, opts ...grpc.CallOption) (*RDDProvisionResponse, error) {
	out := new(RDDProvisionResponse)
	err := grpc.Invoke(ctx, "/rdd.Rdd/Provision", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rddClient) GetStatus(ctx context.Context, in *RDDStatusRequest, opts ...grpc.CallOption) (*RDDStatusResponse, error) {
	out := new(RDDStatusResponse)
	err := grpc.Invoke(ctx, "/rdd.Rdd/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rddClient) Deprovision(ctx context.Context, in *RDDDeprovisionRequest, opts ...grpc.CallOption) (*RDDDeprovisionResponse, error) {
	out := new(RDDDeprovisionResponse)
	err := grpc.Invoke(ctx, "/rdd.Rdd/Deprovision", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rddClient) Action(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := grpc.Invoke(ctx, "/rdd.Rdd/Action", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rdd service

type RddServer interface {
	Provision(context.Context, *RDDProvisionRequest) (*RDDProvisionResponse, error)
	GetStatus(context.Context, *RDDStatusRequest) (*RDDStatusResponse, error)
	Deprovision(context.Context, *RDDDeprovisionRequest) (*RDDDeprovisionResponse, error)
	Action(context.Context, *ActionRequest) (*ActionResponse, error)
}

func RegisterRddServer(s *grpc.Server, srv RddServer) {
	s.RegisterService(&_Rdd_serviceDesc, srv)
}

func _Rdd_Provision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RDDProvisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RddServer).Provision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdd.Rdd/Provision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RddServer).Provision(ctx, req.(*RDDProvisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rdd_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RDDStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RddServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdd.Rdd/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RddServer).GetStatus(ctx, req.(*RDDStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rdd_Deprovision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RDDDeprovisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RddServer).Deprovision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdd.Rdd/Deprovision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RddServer).Deprovision(ctx, req.(*RDDDeprovisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rdd_Action_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RddServer).Action(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdd.Rdd/Action",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RddServer).Action(ctx, req.(*ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rdd_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rdd.Rdd",
	HandlerType: (*RddServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Provision",
			Handler:    _Rdd_Provision_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Rdd_GetStatus_Handler,
		},
		{
			MethodName: "Deprovision",
			Handler:    _Rdd_Deprovision_Handler,
		},
		{
			MethodName: "Action",
			Handler:    _Rdd_Action_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rdd.proto",
}

func init() { proto.RegisterFile("rdd.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0x9b, 0x38, 0x6e, 0xeb, 0x49, 0x93, 0xba, 0xd3, 0x0f, 0x19, 0x83, 0xa0, 0xf2, 0xa1,
	0x54, 0x45, 0x72, 0xa4, 0xf4, 0x86, 0x10, 0x12, 0xd5, 0x4a, 0x80, 0xc4, 0x01, 0x2d, 0x70, 0xe1,
	0xe6, 0x78, 0x87, 0xc8, 0x82, 0x78, 0xdd, 0xdd, 0x35, 0x8f, 0xc0, 0x6b, 0xf2, 0x2a, 0x28, 0xeb,
	0x8f, 0xda, 0x26, 0x52, 0x6f, 0x9e, 0x99, 0xdf, 0xcc, 0x8e, 0xff, 0xf3, 0x07, 0x4f, 0x09, 0x11,
	0x17, 0x4a, 0x1a, 0x89, 0x8e, 0x12, 0x22, 0x7c, 0xb6, 0x96, 0x72, 0xfd, 0x8b, 0x16, 0x49, 0x91,
	0x2d, 0x92, 0x3c, 0x97, 0x26, 0x31, 0x99, 0xcc, 0x75, 0x85, 0x84, 0x2f, 0xea, 0xaa, 0x8d, 0x56,
	0xe5, 0x8f, 0x85, 0xc9, 0x36, 0xa4, 0x4d, 0xb2, 0x29, 0x2a, 0x20, 0x7a, 0x05, 0xa7, 0x9c, 0xb1,
	0xcf, 0x4a, 0xfe, 0xce, 0x74, 0x26, 0x73, 0x4e, 0xf7, 0x25, 0x69, 0x83, 0x67, 0xe0, 0xaa, 0x32,
	0xff, 0xc8, 0x82, 0xd1, 0xe5, 0xe8, 0xda, 0xe3, 0x55, 0x10, 0x5d, 0xc1, 0x59, 0x1f, 0xd6, 0x85,
	0xcc, 0x35, 0xe1, 0x1c, 0xc6, 0x99, 0xa8, 0xd1, 0x71, 0x26, 0xa2, 0x08, 0x7c, 0xce, 0xd8, 0x17,
	0x93, 0x98, 0x52, 0x37, 0x13, 0x87, 0xcc, 0xdf, 0x11, 0x9c, 0x74, 0xa0, 0x7a, 0xd2, 0x15, 0xb8,
	0xda, 0x24, 0x86, 0x2c, 0x38, 0x5f, 0xfa, 0xf1, 0xf6, 0x6f, 0x59, 0x42, 0x1b, 0x99, 0x6f, 0x49,
	0xe2, 0x55, 0xf9, 0x61, 0xbf, 0x71, 0x67, 0x3f, 0x7c, 0x0b, 0x47, 0xa9, 0x22, 0x2b, 0x00, 0xdb,
	0x0e, 0x71, 0x2e, 0x47, 0xd7, 0xd3, 0x65, 0x18, 0x57, 0x22, 0xc4, 0x8d, 0x08, 0xf1, 0xd7, 0x46,
	0x04, 0xde, 0xe3, 0xf1, 0x35, 0x40, 0x59, 0x88, 0xc4, 0x90, 0xed, 0x9e, 0x3c, 0xda, 0xdd, 0xa1,
	0xd1, 0x07, 0xe7, 0x1b, 0xff, 0x14, 0xb8, 0x76, 0x9f, 0xed, 0x67, 0xf4, 0x12, 0xce, 0x39, 0x63,
	0x8c, 0x8a, 0xa1, 0xb8, 0x43, 0x29, 0x02, 0xb8, 0x18, 0x82, 0x95, 0x1c, 0xd1, 0x31, 0xcc, 0xde,
	0xa5, 0xe6, 0xa1, 0x35, 0xba, 0x81, 0x79, 0x93, 0xa8, 0x15, 0x0b, 0xe0, 0x40, 0x97, 0x69, 0x4a,
	0x5a, 0xdb, 0x89, 0x87, 0xbc, 0x09, 0xa3, 0xe7, 0x70, 0xc8, 0x49, 0xcb, 0x52, 0xa5, 0x84, 0x08,
	0x93, 0x9f, 0x59, 0xde, 0x3c, 0x6a, 0xbf, 0x6f, 0xee, 0x61, 0xda, 0x51, 0x16, 0x67, 0xe0, 0xa9,
	0xea, 0x15, 0x12, 0xfe, 0x1e, 0xfa, 0x70, 0xd4, 0xee, 0x93, 0xe5, 0x6b, 0x7f, 0x84, 0xc7, 0x30,
	0x6d, 0x33, 0x24, 0xfc, 0x31, 0x22, 0xcc, 0x05, 0xf5, 0x20, 0x07, 0x3d, 0x70, 0x49, 0x29, 0xa9,
	0xfc, 0x09, 0x9e, 0xc0, 0xac, 0x53, 0x26, 0xe1, 0xbb, 0xcb, 0x3f, 0x63, 0x70, 0xb8, 0x10, 0x78,
	0x07, 0x5e, 0xeb, 0x22, 0x0c, 0xec, 0x91, 0x77, 0xb8, 0x30, 0x7c, 0xb2, 0xa3, 0x52, 0x2b, 0xb3,
	0x87, 0x6f, 0xc0, 0x7b, 0x4f, 0xa6, 0xf2, 0x0f, 0x9e, 0x37, 0x64, 0xcf, 0x74, 0xe1, 0xc5, 0x30,
	0xdd, 0x76, 0x7f, 0x80, 0x69, 0x47, 0x70, 0x0c, 0x1b, 0xf0, 0xff, 0x73, 0x85, 0x4f, 0x77, 0xd6,
	0xda, 0x49, 0xb7, 0xb0, 0x5f, 0x9d, 0x04, 0xd1, 0x82, 0xbd, 0x83, 0x85, 0xa7, 0xbd, 0x5c, 0xd3,
	0x74, 0x77, 0xf0, 0xdd, 0x55, 0x42, 0x14, 0xab, 0xd5, 0xbe, 0xb5, 0xd5, 0xed, 0xbf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xbb, 0x93, 0x72, 0x1d, 0xd7, 0x03, 0x00, 0x00,
}
